#######################################################
### Run Immediatley After Import Script is Done #######
#######################################################

####### Create index and unique constraints
CREATE CONSTRAINT ON (n:Semantic) ASSERT n.TUI IS UNIQUE;
CREATE CONSTRAINT ON (n:Semantic) ASSERT n.STN IS UNIQUE;
CREATE CONSTRAINT ON (n:Semantic) ASSERT n.DEF IS UNIQUE;
CREATE CONSTRAINT ON (n:Semantic) ASSERT n.name IS UNIQUE;
CREATE CONSTRAINT ON (n:Concept) ASSERT n.CUI IS UNIQUE;
CREATE CONSTRAINT ON (n:Code) ASSERT n.CodeID IS UNIQUE;
CREATE INDEX FOR (n:Code) ON (n.SAB);
CREATE INDEX FOR (n:Code) ON (n.CODE);
CREATE CONSTRAINT ON (n:Term) ASSERT n.SUI IS UNIQUE;
CREATE INDEX FOR (n:Term) ON (n.name);
CREATE CONSTRAINT ON (n:Definition) ASSERT n.ATUI IS UNIQUE;
CREATE INDEX FOR (n:Definition) ON (n.SAB);
CREATE INDEX FOR (n:Definition) ON (n.DEF);
CREATE CONSTRAINT ON (n:NDC) ASSERT n.ATUI IS UNIQUE;
CREATE CONSTRAINT ON (n:NDC) ASSERT n.NDC IS UNIQUE;
CALL db.index.fulltext.createNodeIndex("Term_name",["Term"],["name"]);
//MATCH (n:Term) WHERE size((n)--())=0 DELETE (n)

// Mutate GENE_LOCATIONs from Strings to Integers
MATCH (t:Term)-[r:gene_start_position|gene_end_position]-(i:Code {SAB:'GENE_LOCATION'})
SET t.name = toInteger(t.name);
// Mutate eQTL Location Terms
MATCH (t:Term)-[r:eqtl_location]-(i:Code {SAB:'GTEX_EQTL'})
SET t.name = toInteger(t.name);
// Mutate eqtl pvalue bins from string to int
MATCH (eqtl:Code {SAB:'GTEX_EQTL'})-[p:p_value]-(t:Term) WITH t,split(t.name,',') as bin
SET t.lowerbound = toFloat(bin[0]) 
SET  t.upperbound = toFloat(bin[1]);
// Mutate TPM bins from string to ints
MATCH (eqtl:Code {SAB:'GTEX_EXP'})-[r:TPM]-(t:Term) WITH t,split(t.name,',') as bin
SET t.lowerbound = toFloat(bin[0]) 
SET  t.upperbound = toFloat(bin[1]);










# Queries for the UMLS-KF (our data on top of UMLS)

#######################################
##### Node & Relationship Checks ######    need to update these
#######################################

# Check how many new nodes we added (nodes that have a unique identifier that starts with 'K')

### Concept
match (concept: Concept) where concept.CUI starts with 'K' return count(concept)   # 3,401,693   (was 1,562,505 before adding 'GTEX_EXP'),  CORRECT

### Code ###
match (code: Code) where code.CodeID contains 'KC' return count(code)   # 2,724,391  (was 885,203)  why is this not the same as concepts count? B/c only the GTEX_EQTL and GTEX EXP have CodeIDs that contain 'KC'

 # Code by SAB
match (hgnc_hcop: Code {SAB : 'HGNC HCOP'})  return count(hgnc_hcop) as hgnc_hcop_cnt    #  27,357  CORRECT

match (mp: Code {SAB : 'MP'})  return count(mp) as mp_cnt   # 14,274   CORRECT

match (gtex_exp: Code {SAB : 'GTEX_EXP'}) return count(gtex_exp) as gtex_exp_cnt     #  1,839,188  CORRECT

match (gtex_eqtl: Code {SAB : 'GTEX_EQTL'}) return count(gtex_eqtl) as gtex_eqtl_cnt   #  884,757  CORRECT


match (dbsnp: Code {SAB : 'DBSNP_151'}) return count(dbsnp) as dbsnp_cnt   # 636,117 CORRECT, After adding the actual dbSNP data, this # is going to be much higher


27,357 + 14,274 + 1,839,188 + 884,757 + 636,117 = 3,401,693  # same as the Concepts, CORRECT
# Code Nodes by SAB
Counter({'HGNC_HCOP': 27357,
         'MP': 14274,
         'GTEX_EXP': 1839188,
         'GTEX_EQTL': 884757,
         'DBSNP_151': 636117})


### Term ###
match (t:Term) where t.SUI starts with 'KS'  return count(t)    #  3,026,420  (was 2,152,570)   correct.

# Check number of MP Concept and Code nodes connected 
match (concept:Concept)--(code:Code) where code.SAB = 'MP' return count(concept), count(code)  # 14,274 concepts and 14,274 codes, correct
# Check number of HGNC_HCOP Concept and Code nodes connected
match (concept:Concept)--(code:Code) where code.SAB = 'HGNC_HCOP' return count(concept), count(code)  # 17,391 concepts and 27,357 codes, correct
# Check number of GTEX (eQTL) Concept and Code nodes
match (concept:Concept)--(code:Code) where code.SAB = 'GTEX_EQTL' return count(concept),count(code)    # 884,757 concepts and 884,757 codes, correct
# Check number of GTEX (Expression) Concept and Code nodes
match (concept:Concept)--(code:Code) where code.SAB = 'GTEX_EXP' return count(concept),count(code)    # 1,839,188 concepts and 1,839,188 codes, correct
# Check number of dbSNP Concept and Code nodes

match (concept:Concept)--(code:Code) where code.SAB = 'DBSNP_151' return count(concept),count(code)    #  636,527

##################################
##### Check for isolated nodes ###
##################################

Neo4j bloom - Concept islands, Island centers - C0000873, C0001304,  C0009333, C0001485, C0001514   are these really islands, or is bloom only showing some of the concept space?
match (n:Concept {CUI:'C0001514'})-[r]-(n2:Concept)-[r2]-(n3:Concept) return count(n3)

match (c:Concept) where c.CUI starts with 'KC' and not (c)--() 
match (co:Code) where co.CodeID starts with 'KC' and not (co)--()   
match (t:Term) where t.SUI starts with 'KS' and not (t)--() 
return count(c), count(co), count(t)    

# search for disconnected parts of the graph not just individual node Islands.


########################
#### dbSNP queries #####
########################  # Can't just search for 'DBSNP 151' bc the dbsnp nodes from GTEx have the same SAB

### Check number of dbSNP nodes
match (DB_code:Code {SAB:'DBSNP_151'})--(c1:Concept)--(c2:Concept)--(hgnc:Code {SAB:'HGNC'})
return COUNT(DB_code)

### Show gene w multiple snps
MATCH (n:Concept)-[r:gene_has_eqtl]-(:Concept)
WITH n, count(r) as snp_cnt
WHERE snp_cnt > 1
MATCH g=(n)-[:gene_has_eqtl]-(:Concept)
RETURN g
LIMIT 2


###############################
###### GTEx eQTL checks  ######
###############################

# Check that the correct number of GTEx eQTL Concept nodes are in the graph
match (a:Code {SAB:'GTEX_EQTL'})--(b:Concept) return count(a),count(b) // 1,160,938 correct

# Check that we have the correct number of GTEx eQTL Concept nodes that have relationships with HGNC Concept nodes 
match (a:Code {SAB:'GTEX_EQTL'})--(b:Concept)--(c:Concept)--(d:Code{SAB:'HGNC'}) return count(distinct a) // 884757, correct

# Check that we have the correct number of GTEx eQTL Concept nodes that DO NOT HAVE relationships with HGNC Concept nodes 
match (a:Code {SAB:'GTEX_EQTL'})--(b:Concept) where not (b)-[:eqtl_in_gene]-(:Concept)--(:Code{SAB:'HGNC'}) return count(distinct a) // 276181 correct



#####################################
###### GTEX Expression queries ######
#####################################

# Show a GTEX EXP Concept node, with its HGNC and UBERON Concept nodes connections, along with all three of their Code nodes
match (gtex_exp:Concept)-[r0]-(gtex_exp_code:Code) where gtex_exp_code.SAB = 'GTEX_EXP' 
match (gtex_exp)-[r1]-(hgnc_concept:Concept)-[r2]-(hgnc_code:Code) where hgnc_code.SAB = 'HGNC'
match (gtex_exp)-[r3]-(ub_concept:Concept)-[r4]-(ub_code:Code) where ub_code.SAB = 'UBERON'
return gtex_exp, gtex_exp_code, hgnc_concept,hgnc_code, ub_concept, ub_code,r0,r1,r2,r3,r4 limit 1
       
# Return all GTEX EXP nodes associated with a specific tissue (UBERON code),   ie, venous blood
match (h:Concept {CUI:'HC005510'})--()--(gtex_exp_code:Code {SAB:'GTEX_EXP'}) return count(gtex_exp_code)        # 35,369   must check each tissue

# Return all GTEX EXP nodes associated with a specific gene (HGNC code),   ie, venous blood
match (h:Concept {CUI:'HC005510'})--()--(gtex_exp_code:Code {SAB:'GTEX_EXP'}) return count(gtex_exp_code) 


###########################
#### QUERY STEPS 1-5 ######
########################### Each step builds on the previous step, so step 5 contains everything.

#### STEP 1
match (hp_phenotype:Code {CODE:'HP:0025579'})
return hp_phenotype

#### STEP 2
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(c1:Concept)-[r1]-(c2:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'}) 
return hp_phenotype,r0,r1,r2,c1,c2,mp_phenotype

#### STEP 3
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
return hp_phenotype,hp_concept,r0,r1,r2,mp_phenotype,mp_concept,r3,r4,hcop_concept,mouse_gene limit 5

#### STEP 4
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
return hp_phenotype,hp_concept,r0,r1,r2,mp_phenotype,mp_concept,r3,r4,hcop_concept,mouse_gene,hgnc_concept,r5,r6,human_gene limit 2

#### STEP 5
# Median TPM
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(eqtl_concept:Concept)-[r8]-(tpm:Code {SAB:'GTEX_EXP'})
return hp_phenotype,hp_concept,r0,r1,r2,mp_phenotype,mp_concept,r3,r4,
hcop_concept,mouse_gene,hgnc_concept,r5,r6,human_gene,eqtl_concept,r7,r8,tpm limit 1
# eQTL
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(eqtl_concept:Concept)-[r8]-(eqtl:Code {SAB:'GTEX_EQTL'})
return hp_phenotype,hp_concept,r0,r1,r2,mp_phenotype,mp_concept,r3,r4,
hcop_concept,mouse_gene,hgnc_concept,r5,r6,human_gene,eqtl_concept,r7,r8,eqtl limit 1



#######################################
##### Search by eqtl p-value ##########
#######################################   need to check, 

match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(eqtl_concept:Concept)-[r8]-(eqtl:Code {SAB:'GTEX_EQTL'})-[p:p_value]-(t:Term)
where t.upperbound < 0.02 and  t.lowerbound > .001
return count(distinct eqtl)              #    112 eqtls

upperbound below .02 = 5,664 eqtls
upperbound below .02 and lowerbound above .001 = 112 eqtls


match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(exp_concept:Concept)-[r8]-(exp:Code {SAB:'GTEX_EXP'})-[tpm:TPM]-(t:Term)
where t.upperbound < 50
return count(exp)                    # 6,696 genes 


########################################
####### Show GTEX (eQTL and Exp) #######
########################################

# SHOW EQTL triple
match (eqtl:Code {SAB:'GTEX_EQTL'})-[r]-(c:Concept)
match (c)-[*1]-(cc:Concept) return c,cc limit 3

# SHOW EXP double
match (eqtl:Code {SAB:'GTEX_EXP'})-[r]-(c:Concept)
match (c)-[*1]-(cc:Concept) return c,cc limit 2

###########################################################
### Show HGNC Gene Location/Strand/Chrom Code and Terms ###
###########################################################

match (gl_code:Code {SAB:'GENE_LOCATION'})-[r]-(c:Concept)-[r2]-(hgnc_code:Code {SAB:'HGNC'})
return gl_code,r,r2,hgnc_code,c limit 5
       




######################################
########## MP Queries ################
######################################

# Show all distinct MP-MP relationships
MATCH (a:Code)<-[r]-(b:Concept)-[r1]->(c:Concept)-[r2]->(d:Code)
WHERE  a.SAB = 'MP'  AND d.SAB = 'MP'  
RETURN distinct type(r1) as rel



#########################################################
### Check that the GTEX EQTL and GTEX EXP Code nodes ####
######### have the correct # of Term nodes ##############
#########################################################

# Theyre modeled to fit into the UMLS schema , so theree are no upper/lower bound properties
# The name property contains the  interval,in the form 'lowerbound,upperbound'
# You need to split the name property by ',' and cast each number to float.

# Correct
How many GTEX EQTL Code nodes have at least one Term node?
match (c:Code {SAB:'GTEX EQTL'})--(:Term) return count( distinct c)   #  884,757
How many GTEX EQTL code nodes are there total?  #   884,757   
match (c:Code {SAB:'GTEX EQTL'}) return count(c)
# Correct
How many GTEX EXP code nodes have at least one Term node? Should be 1-to-1. 
match (c:Code {SAB:'GTEX EXP'})--(:Term) return count( distinct c)   # 1,839,188
How many GTEX EXP code nodes are there total?
match (c:Code {SAB:'GTEX EXP'}) return count(c)  # 1,839,188



