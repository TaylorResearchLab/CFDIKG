



#################################################################################################
######## These are some of the major queries that our version of UMLS can be used for ###########
################ These are Cypher Queries that can take parameters.##############################
#################################################################################################




##############################
###### GTEX_EQTL queries #####
##############################

# Search eqtls by UBERON CUI (tissue)
#  Return number of eqtls that are connected to the UBERON Brain Concept node
MATCH (UB_brain:Concept {CUI:'HC009101'})--(eqtls:Concept)--(eqtl_code:Code {SAB: 'GTEX_EQTL'}) return count(eqtl_code)  # 18,751 correct!

# Search eqtls by HGNC CUI (gene)
#  Return number of eqtls that are connected to this HGNC Concept node
MATCH (gene:Concept {CUI:'C2828785'})--(eqtls:Concept)--(eqtl_code:Code {SAB: 'GTEX_EQTL'}) return count(eqtl_code)    # 26 correct!

# Search eqtls by Varaint/dbSNP CUI 
# Return number of eqtls associated with this variation


# Search for the unique eqtl that is associated with one tissue, one gene and one variation.
# Find the eqtl associated with brain tissue, the FTLP2 gene and the rs191565734 variation.
MATCH (eqtl)-[]->(tissue:Concept {CUI:'HC009101'})
MATCH (eqtl)-[]->(gene:Concept {CUI:'C2829418'})
MATCH (eqtl)-[]->(var:Concept {CUI: 'KC94619797786527'})  // returns KC5566850536992, which is correct, check again
RETURN eqtl, tissue, gene

# Return the Code node attached to the eqtl Concept node we just searched for.
MATCH (eqtl)-[]->(tissue:Concept {CUI:'HC009101'})
MATCH (eqtl)-[]->(gene:Concept {CUI:'C2829418'})
MATCH (eqtl)-[]->(var:Concept {CUI: 'KC9461979778652'}) 
MATCH (eqtl)-[]-(code:Code)
RETURN code



#####################################
###### GTEX Expression queries ######
#####################################

# Show a GTEX EXP Concept node, with its HGNC and UBERON Concept nodes connections, along with all three of their Code nodes
match (gtex_exp:Concept)-[r0]-(gtex_exp_code:Code) where gtex_exp_code.SAB = 'GTEX_EXP' 
match (gtex_exp)-[r1]-(hgnc_concept:Concept)-[r2]-(hgnc_code:Code) where hgnc_code.SAB = 'HGNC'
match (gtex_exp)-[r3]-(ub_concept:Concept)-[r4]-(ub_code:Code) where ub_code.SAB = 'UBERON'
return gtex_exp, gtex_exp_code, hgnc_concept,hgnc_code, ub_concept, ub_code,r0,r1,r2,r3,r4 limit 1
       
# Return all GTEX EXP nodes associated with a specific tissue (UBERON code),   ie, venous blood
match (h:Concept {CUI:'HC005510'})--()--(gtex_exp_code:Code {SAB:'GTEX_EXP'}) return count(gtex_exp_code)        # 35,369   must check each tissue

# Return all GTEX EXP nodes associated with a specific gene (HGNC code),   ie, venous blood
match (h:Concept {CUI:'HC005510'})--()--(gtex_exp_code:Code {SAB:'GTEX_EXP'}) return count(gtex_exp_code) 





#########################################################
###### Search for genes from the email with Deanne ######
#########################################################

MP terms and defs, From OLS
# MP:0003923 = abnormal heart left atrium morphology     (IMPC does not have this)
# MP:0003921 = abnormal heart left ventricle morphology    (This is what IMPC has) 

match (mp_code:Code {SAB: 'MP', CODE:'MP:0003921'})-[r0:CODE]-(mp_concept:Concept)-[r1:disease_has_associated_gene]
-(gene_Concept:Concept)-[r2:CODE]-(gene_code:Code {SAB:'HGNC_HCOP'}) 
return count(gene_code)
# 115   --- ~87 of these are from IMPC


match (mp:Code {CODE:'MP:0003923'})--(mp_C:Concept)-[r:has_phenotype]-(gene_C:Concept)-[c:CODE]-(gene:Code {SAB: 'HGNC_HCOP'})   return count(gene)
# 8     --- these are from MGI 


##############################################################################
#### search for all cardiac phenotypes, their associated genes and eqtls #####
##############################################################################

[Congenital Heart Defect] HP:0001627

"""WITH "match (t:Term)--(a:Code{SAB:'HPO',CODE:'HP:0001627'})--(b:Concept)-[r1:has_mouse_phenotype]-(c:Concept)--(d:Code {SAB:'MP'}) with c match (c)-[r2]-(e:Concept)--(f:Code {SAB:'HGNC_HCOP'}) with e
match (e)-[r3]-(g:Concept)--(h:Code {SAB:'HGNC'}) with g,h
match (g)--(i:Term)
return distinct h.CODE as `HGNC CODE` ,split(i.name,' ')[0] as `gene name`" as query
CALL apoc.export.csv.query(query, "gene_set.csv", {})
YIELD  done
RETURN done;"""





###########################
#### QUERY STEPS 1-5 ######
########################### Each step builds on the previous step, so step 5 also contains all previous steps.

#### STEP 1 #####
match (hp_phenotype:Code {CODE:'HP:0025579'})
return hp_phenotype

#### STEP 2 ####
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(c1:Concept)-[r1]-(c2:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'}) 
return hp_phenotype,r0,r1,r2,c1,c2,mp_phenotype

#### STEP 3 #####
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
return hp_phenotype,hp_concept,r0,r1,r2,mp_phenotype,mp_concept,r3,r4,hcop_concept,mouse_gene limit 5

#### STEP 4  ######
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
return hp_phenotype,hp_concept,r0,r1,r2,mp_phenotype,mp_concept,r3,r4,hcop_concept,mouse_gene,hgnc_concept,r5,r6,human_gene limit 2

#### STEP 5 ######
# Median TPM
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(eqtl_concept:Concept)-[r8]-(tpm:Code {SAB:'GTEX_EXP'})
return hp_phenotype,hp_concept,r0,r1,r2,mp_phenotype,mp_concept,r3,r4,
hcop_concept,mouse_gene,hgnc_concept,r5,r6,human_gene,eqtl_concept,r7,r8,tpm limit 1

# eQTL
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(eqtl_concept:Concept)-[r8]-(eqtl:Code {SAB:'GTEX_EQTL'})
return hp_phenotype,hp_concept,r0,r1,r2,mp_phenotype,mp_concept,r3,r4,
hcop_concept,mouse_gene,hgnc_concept,r5,r6,human_gene,eqtl_concept,r7,r8,eqtl limit 1



#######################################
##### Search by eqtl p-value ##########
#######################################   

##### With p-values as integers 
match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(eqtl_concept:Concept)-[r8]-(eqtl:Code {SAB:'GTEX_EQTL'})-[p:p_value]-(t:Term)
where t.upperbound < 0.02 and  t.lowerbound > .001 return count(eqtl)                        # 112 eqtls

match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(exp_concept:Concept)-[r8]-(exp:Code {SAB:'GTEX_EXP'})-[tpm:TPM]-(t:Term)
where t.upperbound < 50 return count(exp)                                                        # 6,696 genes 
    
########### Same 2 queries as above but, With p-values as strings, located 
########### in the name property of the pvalue Term

match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(eqtl_concept:Concept)-[r8]-(eqtl:Code {SAB:'GTEX_EQTL'})-[p:p_value]-(t:Term)
WITH eqtl,toFloat(split(t.name,',')[0]) as lb, toFloat(split(t.name,',')[1]) as ub
WHERE lb > .001 and ub  < .02 RETURN count(eqtl)                                                     # 112 eqtls

match (hp_phenotype:Code {CODE:'HP:0025579'})-[r0]-(hp_concept:Concept)-[r1]-(mp_concept:Concept)-[r2]-(mp_phenotype:Code {SAB:'MP'})
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
match (hgnc_concept)-[r7]-(exp_concept:Concept)-[r8]-(exp:Code {SAB:'GTEX_EXP'})-[tpm:TPM]-(t:Term)
WITH exp,toFloat(split(t.name,',')[0]) as lb, toFloat(split(t.name,',')[1]) as ub
WHERE ub  < 50 RETURN count(exp)                                                                    # 6,744 slightly more than above



####### Pvalue casting to int VS not casting to int query timing ######

#  Timing the return of eqtls when you have to cast to int.
MATCH (eqtl:Code {SAB:'GTEX_EQTL'})-[p:p_value]-(t:Term)
WITH eqtl,toFloat(split(t.name,',')[0]) as lb, toFloat(split(t.name,',')[1]) as ub
WHERE lb > 1e-20 and ub  < 1 RETURN count(eqtl)        #### 1447 ms.

# Timing without having to cast
# MATCH (eqtl:Code {SAB:'GTEX_EQTL'})-[p:p_value]-(t:Term)
WHERE t.lowerbound > 1e-20 and t.upperbound  < 1 RETURN count(eqtl)  # 1118 ms.





######################################################
########### Starting With eQTL (actually SNP) ########
######################################################

##### Return all eqtls in the gene that my starting eqtl is in
WITH 'rs4245244 - Brain Frontal Cortex BA9 - SMAD7' as eqtl_CODE
MATCH (a:Code)<--(b:Concept)-[r0]-(c:Concept)-[r2]->(d:Code)
MATCH (c)-[r1:gene_in_eqtl]->(e:Concept)-->(f:Code {SAB:'GTEX_EQTL'})
WHERE  a.CODE = eqtl_CODE  AND d.SAB = 'HGNC'  
RETURN COUNT(DISTINCT f)



###############################
###### With HGNC gene #########
###############################

WITH 'HGNC:12658' as gene





####################################
### Search By Gene/eQTL Location ###
####################################

MATCH (a:Term)-[:PT]-(b:Code {CODE:'HGNC:11998'})--(c:Concept)--(d:Code{SAB:'GENE_LOCATION'})-[:on_chromosome]-(gchrom:Term)--(e:Code {SAB:'GTEX_EQTL'}) 
WITH a.name as gene,d,e
MATCH (f:Term)-[:gene_start_position]-(d)-[:gene_end_position]-(g:Term) WITH gene,e,f.name as gstart,g.name as gend
MATCH (e)-[:eqtl_location]-(h:Term) WITH h.name as eloc,e.CODE as eqtl,gene,gstart,gend WHERE  gstart < eloc < gend
RETURN  COUNT(DISTINCT eqtl)    # 16, correct


# Same as above but filter eqtls by p-value as well
MATCH (a:Term)-[:PT]-(b:Code {CODE:'HGNC:11998'})--(c:Concept)--(d:Code{SAB:'GENE_LOCATION'})-[:on_chromosome]-(gchrom:Term)--(e:Code {SAB:'GTEX_EQTL'}) WITH a.name as gene,d,e
MATCH (f:Term)-[:gene_start_position]-(d)-[:gene_end_position]-(g:Term)
WITH gene,e,f.name as gstart,g.name as gend
MATCH (e)-[:eqtl_location]-(h:Term)WITH h.name as eloc,gene,gstart,gend,e
WHERE  gstart < eloc < gend WITH e.CODE as eqtl 
MATCH (e)-[:p_value]-(i:Term) WHERE i.lowerbound > 1e-20 AND i.upperbound  < 1
RETURN DISTINCT eqtl

#######################################
##### MP and HPO recursive Search #####
#######################################

# Return all MP codes UNDER (subclasses) of starting code
match (b:Code {CODE:'MP:0005385'})--(a:Concept)<-[:SCO *1..]-(n:Concept)-[r]-(m:Code {SAB:'MP'}) 
RETURN DISTINCT m.CODE

# Reutrn all HPO codes under starting code
match (b:Code {CODE:'HP:0030680'})--(a:Concept)-[:inverse_isa *1..]->(n:Concept)-[r]-(m:Code {SAB:'HPO'}) 
RETURN DISTINCT m.CODE

WITH "match (b:Code {CODE:'HP:0030680'})--(a:Concept)-[:inverse_isa *1..]->(n:Concept)-[r]-(m:Code {SAB:'HPO'}) 
RETURN DISTINCT m.CODE" AS query
CALL apoc.export.csv.query(query, "HP_0030680_subclasses.csv", {})
YIELD  done
RETURN done;


###########################################################
####### Recursive Atrial Septal Defects (and children) ####
##############  query for gene sets #######################
###########################################################

with 'MP:0010403' as parent
match (b:Code {CODE:parent,SAB:'MP'})--(a:Concept)<-[:SCO *1..]-(n:Concept)-[r]-(m:Code {SAB:'MP'}) 
with  collect(n.CUI) + a.CUI as terms
unwind terms as uterms
with collect(distinct uterms) as phenos
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
where mp_concept.CUI in phenos
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
with hgnc_concept, human_gene
match (hgnc_concept)-[:CODE]-(gl_code:Code {SAB:'GENE_LOCATION'})
with distinct human_gene,gl_code
match (gstart)-[:gene_start_position]-(gl_code)-[r:gene_end_position]-(gend:Term)
match (gl_code)-[:on_chromosome]-(gchrom:Term)
return gstart.name,gend.name,gchrom.name,human_gene.CODE 

########## extend the above query to filter the gene list for gene expressed (by TPM) in the heart only heart-related UBERON CUI/CODEs

'Artery - Aorta' - C0003956/0001496 - CODE isnt in UMLS
'Heart - Left Ventricle' - HC005124/0006566
'Heart - Atrial Appendage' - HC003129/0006631

with 'MP:0010403' as parent // INSERT PARENT PHENOTYPE and level of recursion   
match (b:Code {CODE:parent,SAB:'MP'})--(a:Concept)<-[:SCO *1..]-(n:Concept)-[r]-(m:Code {SAB:'MP'}) 
with  collect(n.CUI) + a.CUI as terms unwind terms as uterms
with collect(distinct uterms) as phenos
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
where mp_concept.CUI in phenos
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
with hgnc_concept,human_gene
match (human_gene)-[:CODE]-(hgnc_concept)-[:gene_has_median_expression]-(gtex_concept:Concept)-[:median_expression_in_tissue]-(uberon_concept:Concept)-[:CODE]-(uberon_code:Code {SAB:'UBERON'})
where uberon_code.CODE in ['0006566','0006631']    // INSERT UBERON TISSUE CODES 
with *
match (gtex_concept)--(gtex_code:Code {SAB:'GTEX_EXP'})--(gtex_term:Term)
where gtex_term.lowerbound > 4
return distinct human_gene.CODE 

########### same query as above but instead of filtering by gene expression in a specific tissue(s) (with TPM), filter by the eqtl p value

with 'MP:0010403' as parent
match (b:Code {CODE:parent,SAB:'MP'})--(a:Concept)<-[:SCO *1..]-(n:Concept)-[r]-(m:Code {SAB:'MP'}) 
with  collect(n.CUI) + a.CUI as terms unwind terms as uterms
with collect(distinct uterms) as phenos
match (mp_concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
where mp_concept.CUI in phenos
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
with hgnc_concept,human_gene
match (human_gene)-[:CODE]-(hgnc_concept)-[:gene_has_eqtl]-(gtex_concept:Concept)-[:eqtl_in_tissue]-(uberon_concept:Concept)-[:CODE]-(uberon_code:Code {SAB:'UBERON'})
where uberon_code.CODE in ['0006566','0006631']
with *
match (gtex_concept)--(gtex_code:Code {SAB:'GTEX_EQTL'})-[:p_value]-(gtex_term:Term)
where gtex_term.upperbound < .005 
return distinct human_gene.CODE 




#######################################
##### Tetralogy of Fallot Query #######
####################################### No need for recursive search here.

There is no mouse model/phenotype for Tetralogy of Fallot. Just Use the 4 individuual phenotypes of Tet. 
HP:0001629 / MP:0010402,  ventricular septal defect
HP:0002623 / MP:0000273 overriding aortic valve, NOT mapped
HP:0001667 / MP:0000276   heart right ventricle hypertrophy, NOT mapped
HP:0001642 / MP:0006128 pulmonary valve stenosis

Start the query with the MP terms bc 2 of the phenotypes are not mapped

match (a:Code {SAB:'MP'})-[:CODE]-(mp_concept:Concept)-[r3]-(hcop_concept:Concept)-[r4]-(mouse_gene:Code {SAB:'HGNC_HCOP'})
where a.CODE in tet_phenos
match (hcop_concept)-[r5]-(hgnc_concept:Concept)-[r6]-(human_gene:Code {SAB: 'HGNC'})
with hgnc_concept,human_gene
match (hgnc_concept)-[:CODE]-(gl_code:Code {SAB:'GENE_LOCATION'})
with distinct human_gene,gl_code
match (gstart)-[:gene_start_position]-(gl_code)-[r:gene_end_position]-(gend:Term)
match (gl_code)-[:on_chromosome]-(gchrom:Term)
return distinct gstart.name,gend.name,gchrom.name,human_gene.CODE 










##############################
### single cell heart data ###
##############################

MATCH (a:Code {SAB:'HGNC'})-[:CODE]-(b:Concept)-->(c:Concept)-[:CODE]-(d:Code {SAB:'scHeart PMID: 31835037'})-[:p_value]-(g:Term)
with *
where g.lowerbound = 0.0
return count(distinct a.CODE)


MATCH (a:Code {SAB:'CL',CODE:'0002131'})-[:CODE]-(b:Concept)-->(c:Concept)-[:CODE]-(d:Code {SAB:'scHeart PMID: 31835037'})-[:log2fc]-(e:Term)
with e,c
match (c)-->(f:Concept)-[:CODE]->(g:Code {SAB:'HGNC'})-[:MTH_ACR]-(h:Term)
where e.upperbound > 2
return g.CODE as HGNC_ID,h.name as gene_name,e.lowerbound as lowebound,e.upperbound as upperbound limit 50

##  with p-value filter
MATCH (a:Code {SAB:'CL',CODE:'0002131'})-[:CODE]-(b:Concept)-->(c:Concept)-[:CODE]-(d:Code {SAB:'scHeart PMID: 31835037'})-[:log2fc]-(e:Term)
with d,e,c
MATCH (d)-[:p_value]-(i:Term)
where i.upperbound > 0.00001
with e,c,i
match (c)-->(f:Concept)-[:CODE]->(g:Code {SAB:'HGNC'})-[:MTH_ACR]-(h:Term)
where e.upperbound > 2
return g.CODE as HGNC_ID,h.name as gene_name,e.lowerbound as lowebound,e.upperbound as upperbound  




