#######################################
### Scripts to run graph algorithms ###
#######################################


Before we can run any graph algorithms we need to extract our sub graph from the entire UMLS graph.

We want to include all node types (Concept, Code, Term) from the data
sources we put in the graph as well as any data sources that our data makes a direct relationship to.
These include:

## Added to UMLS
- HGNC HCOP (mouse genes) nodes
- IMPC
- MP
- GTEX eqtl and GTEX exp

## IN UMLS already
- HGNC (human genes) nodes
- HPO
- UBERON
#################### We are only going to consider the Concept space (Concept-Concept)...


####### DON'T use gds.graph.create() ##########   whats the difference b/t gds.graph.create() and gds.graph.create.cypher(), both create in-memory?
### Create an in-memory graph w/ gds.graph.create('name','Labels','relationships')
CALL gds.graph.create('my-graph', 'Concept', 'has_human_phenotype')
YIELD graphName, nodeCount, relationshipCount;
Nodes: 9,669,972	Relationships: 1218
remove graph,  CALL gds.graph.drop('myGraph') 
get graph info, CALL gds.graph.list('my-graph3')
check for graph, CALL gds.graph.exists('myGraph') YIELD exists

########### Use apoc.path.subgraphAll to get subgraph########
MATCH (p:Person {name: "Stefan"})
CALL apoc.path.subgraphAll(p, {
	relationshipFilter: "KNOWS",
    minLevel: 1,
    maxLevel: 2
})
YIELD nodes, relationships
RETURN p,nodes, relationships;

### Example of apoc.path.subgraphAll() #######
MATCH (e:COMP) WHERE e.componentID= "f4db22e7-68d2-473d-960b-c98dbbadb3a0" 
with e limit 1 CALL apoc.path.subgraphAll(e, 
{relationshipFilter:'CHILD_OF|CONNECTED_TO|LINKED_TO', limit:10}) YIELD nodes 
UNWIND nodes as node  RETURN node.componentID as uuid, node.orphanID as oid, 
node.cTime as time





####### Or just use  gds.graph.create.cypher()     https://towardsdatascience.com/how-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b
CALL gds.graph.create.cypher('full_graph','MATCH (n) RETURN id(n) AS id','MATCH (n)-[e]-(m) RETURN id(n) AS source, e.weight AS weight, id(m) AS target')

--------------- UMLS UBERON graph algo results-------------------
# Create a Subgraph of the Concept-space on the 'UMLS UBERON' graph  
CALL gds.graph.create.cypher('g1','MATCH (n:Concept) RETURN id(n) AS id','MATCH (n:Concept)-[e]-(m:Concept) RETURN id(n) AS source, id(m) AS target')

nodeQuery				relationshipQuery	                                                        graphName    nodeCount	relationshipCount    createMillis
"MATCH (n:Concept) RETURN id(n) AS id"	"MATCH (n:Concept)-[e]-(m:Concept) RETURN id(n) AS source, id(m) AS target"	"g1"	     4629031	47629518	     124491

##### UMLS UBERON ONLY #####
CALL gds.graph.create.cypher('g1','MATCH (n:Concept) WHERE n.CUI starts with "H" RETURN id(n) AS id','MATCH (n:Concept)-[e]-(m:Concept) RETURN id(n) AS source, id(m) AS target',{validateRelationships: False});
     
nodeQuery	relationshipQuery	graphName	nodeCount	relationshipCount	createMillis
"MATCH (n:Concept) WHERE n.CUI starts with "H" RETURN id(n) AS id"	"MATCH (n:Concept)-[e]-(m:Concept) RETURN id(n) AS source, id(m) AS target"	"g1"	13422	41944	51051


### CALL gds.louvain.stream('g1')   # yield nodeId,communityId,intermediateCommunityIds
### CALL gds.pageRank.stream('g1')  # yield nodeId, score
### CALL gds.localClusteringCoefficient.stream('myGraph') # yield nodeId, localClusteringCoefficient
### CALL gds.betweenness.stream('myGraph') YIELD nodeId, score




#####################
###### ALGOS ########  https://neo4j.com/docs/graph-data-science/current/appendix-b/migration-product-algos/
#####################

#### Louvain #####
CALL gds.louvain.stream('my-graph3') YIELD nodeId, communityId, intermediateCommunityIds
### Node Similarity ###
CALL gds.nodeSimilarity.stream('my-graph3') YIELD node1, node2, similarity
### Weakly Connected Components ###
CALL gds.wcc.stream('myGraph') YIELD nodeId, componentId


### Page Rank ###
CALL gds.pageRank.stream('my-graph3',{maxIterations: 2})

### Triangle Counts ####
CALL gds.triangleCount.stream('myGraph')       // relationship  orientation must be 'UNDIRECTED'
YIELD nodeId, triangleCount

### Clustering Coefficients ###
CALL gds.localClusteringCoefficient.stream('myGraph')     // relationship  orientation must be 'UNDIRECTED'
YIELD nodeId, localClusteringCoefficient

### Betweenness Centrality ###
CALL gds.betweenness.stream('myGraph') YIELD nodeId, score


#####################################
######### Helpful queries ###########
#####################################

Check memory estimation of algorithm (just bc the estimate fits into memory (max heap size) this does not guaruntee the actual query will fit.)
------------------------------------
CALL gds.louvain.stream.estimate('g1') 




# How to get a list of nodeIds with their node type, for plotting
MATCH (n:Concept) WHERE n.CUI starts with "H" RETURN id(n) AS id, labels(n) as nodetype

# List of Concepts, with their attached Code node SABs
MATCH (n:Concept)-[:CODE]-(c:Code) WHERE n.CUI starts with "H" RETURN id(n) AS id, c.SAB as sab

# Get degree 
MATCH (c:Concept {CUI: "Michael"}) RETURN apoc.node.degree(p) AS output;

