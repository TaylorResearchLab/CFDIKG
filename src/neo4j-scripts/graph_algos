#######################################
### Scripts to run graph algorithms ###
#######################################

Before we can run any graph algorithms we need to extract our sub graph from the entire UMLS graph.
We want to include all node types (Concept, Code, Term) from the data sources we put in the graph as 
well as any data sources that our data makes a direct relationship to.
These include:

## Added to UMLS
- HGNC HCOP (mouse genes) nodes
- IMPC (no new SAB here, just HGNC and MP nodes)
- MP
- GTEX eqtl and GTEX exp

## IN UMLS already
- HGNC (human genes) nodes
- HPO
- UBERON
#################### We are only going to consider the Concept space (Concept-Concept) right now...


###########################################################################################
######### Create a Subgraph of the entire Concept-space on the UMLS graph  ################  
###########################################################################################

####### Create graph projection of just the CONCEPT space ##########
CALL gds.graph.create.cypher('g1', 'MATCH (n:Concept) 
RETURN id(n) AS id', 'MATCH (n:Concept)-[e]-(m:Concept) RETURN id(n) AS source, id(m) AS target' );

######## Concept and Code space w/o cypher ######
CALL gds.graph.create('g1',['Concept','Code'], '*')
nodes: 16001812, relationships: 39361933

####### Create graph projection of the HGNC-HGNC connections, but include all interconnected nodes b/t any HGNC-HGNC paths too ##########
##### For shortest HGNC-HGNC paths 
CALL gds.graph.create.cypher('g1', 'MATCH (n:Concept) RETURN id(n) AS id', 'MATCH  (code1:Code {SAB:"HGNC"})-[r1:CODE]-(c:Concept)-[r2*]->(c2:Concept)-[r3:CODE]-(code2:Code {SAB:"HGNC"})  RETURN id(code1) AS source, id(code2) AS target' );



##### UMLS UBERON ONLY ##### (just to test the function out quickly)
CALL gds.graph.create.cypher('g1','MATCH (n:Concept) WHERE n.CUI starts with "H" RETURN id(n) AS id','MATCH (n:Concept)-[e]-(m:Concept) RETURN id(n) AS source, id(m) AS target',{validateRelationships: False});

####### Create graph projection of just the whole graph ##########
CALL gds.graph.create.cypher(
    'my-cypher-graph',
    'MATCH (n) RETURN id(n) AS id',
    'MATCH (n)-->(m) RETURN id(n) AS source, id(m) AS target'
)

# my full graph projection query
CALL gds.graph.create.cypher('full-graph', 'MATCH (n) RETURN id(n) AS id', 'MATCH (n)-[e]-(m) RETURN id(n) AS source, id(m) AS target' );


#########################################
############### GRAPH ALGOS #############  https://neo4j.com/docs/graph-data-science/current/appendix-b/migration-product-algos/
#########################################

####### Page Rank ##############
WITH "CALL gds.pageRank.stream('g1') yield nodeId, score" AS query
CALL apoc.export.csv.query(query, "pageRank_concepts.csv", {})
YIELD done RETURN done;

######## Betweenness #############
WITH "CALL gds.betweenness.stream('g1') YIELD nodeId, score" AS query     ### cant run this right now, requires 3441 MiB, or 3.6 G
CALL apoc.export.csv.query(query, "betweenness_concepts.csv", {})
YIELD done RETURN done;

###### Weakly Connected Components #######
WITH "CALL gds.wcc.stream('g1') YIELD nodeId, componentId" AS query
CALL apoc.export.csv.query(query, "wcc_concepts.csv", {})
YIELD done RETURN done;

########## Louvain ################
WITH "CALL gds.louvain.stream('g1') yield nodeId,communityId,intermediateCommunityIds" AS query
CALL apoc.export.csv.query(query, "louvain_concepts.csv", {})
YIELD done RETURN done;

###### Node Similarity (Jaccard) ########    DONT NEED RIGHT NOW
WITH "CALL gds.nodeSimilarity.stream('g1') yield nodeId,communityId,intermediateCommunityIds" AS query   # not enough space for this either
CALL apoc.export.csv.query(query, "nodeSimilarity_concepts.csv", {})
YIELD done RETURN done;

######## Clustering coeff. ###########
WITH "CALL gds.localClusteringCoefficient.stream('g1')    
YIELD nodeId, localClusteringCoefficient" AS query 
CALL apoc.export.csv.query(query, "clusteringCoeff_concepts.csv", {})   
YIELD done RETURN done;                  // relationship  orientation must be 'UNDIRECTED' (when you created graph projection)

# Get just the average Clustering Coefficient
CALL gds.localClusteringCoefficient.stats('full-graph')    
YIELD  averageClusteringCoefficient
RETURN averageClusteringCoefficient;

######## Triangle Counts #########
WITH "CALL gds.triangleCount.stream('g1')       
YIELD nodeId, triangleCount" AS query  
CALL apoc.export.csv.query(query, "triangleCount_concepts.csv", {})
YIELD done RETURN done;








#### All Pairs Shortest Path ########   not using this anymore
CALL gds.alpha.allShortestPaths.stream({
  nodeQuery: "MATCH (code:Code {SAB:'HGNC'}) RETURN id(code) AS id",
  relationshipQuery: "MATCH (code:Code {SAB:'HGNC'})-[:CODE]-(c1:Concept)--(c2:Concept)-[:CODE]-(code2:Code {SAB:'HGNC'}) RETURN id(code) AS source, id(code2) AS target"
  })

YIELD sourceNodeId, targetNodeId, distance
WITH sourceNodeId, targetNodeId, distance
WHERE gds.util.isFinite(distance) = true

MATCH (source:Code) WHERE id(source) = sourceNodeId
MATCH (target:Code) WHERE id(target) = targetNodeId
WITH source, target, distance WHERE source <> target

RETURN source.CODE AS source, target.CODE AS target, distance
ORDER BY distance DESC, source ASC, target ASC
LIMIT 10
--------------

CALL gds.alpha.allShortestPaths.stream('g1')

YIELD sourceNodeId, targetNodeId, distance
WITH sourceNodeId, targetNodeId, distance
WHERE gds.util.isFinite(distance) = true

MATCH (source:Concept)-[:CODE]-(code1:Code {SAB:'HGNC'}) WHERE id(source) = sourceNodeId
MATCH (target:Concept)-[:CODE]-(code1:Code {SAB:'HGNC'}) WHERE id(target) = targetNodeId
WITH source, target, distance WHERE source <> target

RETURN source.CUI AS source, target.CUI AS target, distance
ORDER BY distance DESC, source ASC, target ASC
LIMIT 10


------------

# Using the shortestPath function 
MATCH (code1:Code {SAB: 'HGNC',CODE:'HGNC:13765'} )-[:CODE]-(c1:Concept)--(c2:Concept)-[:CODE]-(code2:Code {SAB:'HGNC',CODE:'HGNC:28346'}), p = shortestPath((c1)-[*]-(c2))
WITH p,c1,c2
RETURN c1.CUI,p,c2.CUI

############### All Pairs Shortest Path for all HGNC-HGNC pairs ###########
######### Create projection for all pairs shortest path query (consider blacklisting 'genome' node here )
######### check the nodes/rels in this projection bc we are not getting correct number of nodes in shortest path results
CALL gds.graph.create.cypher('g1', "MATCH (code:Code {SAB:'HGNC'}) RETURN id(code) AS id", "MATCH (code:Code {SAB:'HGNC'})-[:CODE]-(c1:Concept)--(c2:Concept)-[:CODE]-(code2:Code {SAB:'HGNC'}) RETURN id(code) AS source, id(code2) AS target");

CALL gds.graph.create.cypher('g1', "MATCH (code:Code {SAB:'HGNC'})-[:CODE]-(c1:Concept) RETURN distinct id(c1) AS id","MATCH (code:Code {SAB:'HGNC'})-[:CODE]-(c1:Concept)--(c2:Concept)-[:CODE]-(code2:Code {SAB:'HGNC'}) RETURN id(c1) AS source, id(c2) AS target");

######## Shortest path algo and export results
WITH "CALL gds.alpha.allShortestPaths.stream('g1')
YIELD sourceNodeId, targetNodeId, distance
WITH sourceNodeId, targetNodeId, distance
WHERE gds.util.isFinite(distance) = true
MATCH (source:Code) WHERE id(source) = sourceNodeId
MATCH (target:Code) WHERE id(target) = targetNodeId
WITH source, target, distance WHERE source <> target
RETURN source.CODE AS source, target.CODE AS target, distance" AS query  
CALL apoc.export.csv.query(query, "hgnc_shortest_pairs.csv", {})
YIELD done RETURN done;

###### More Pathfinding queries ##########

apoc.algo.allSimplePaths(startNode :: NODE?, endNode :: NODE?, relationshipTypesAndDirections :: STRING?, maxNodes :: INTEGER?) :: RETURN (path :: PATH?)

-------count all paths between 2 nodes -----
CALL apoc.export.csv.query("MATCH (a:A)-[:AB]->()-[:BC]->()-[:CD]->(d) WITH a, d, count(*) as totalPaths RETURN a.`_id`, d.`_id`, totalPaths", "results.csv", {})


------------Return path elements (node-rel-node-rel-...)
MATCH path = (club:Club)-[:IN_LEAGUE]->(league)-[:IN_COUNTRY]->(country)
RETURN path, apoc.path.elements(path);

----------- Return all relationships in each identified path -----------
# Remember, these path queries will return any and all paths, not just the shortest one, like the shortest path algo does.
MATCH p = (code1:Code {SAB:'HGNC'})-[r1:CODE]-(c:Concept)-[r2*]->(c2:Concept)-[r3:CODE]-(code2:Code {SAB:'HGNC'}) 
WITH code1.CODE as co1, relationships(p) AS rels, code2.CODE as co2
RETURN co1,[x in rels | type(x)] as rel_path,co2 limit 10

---------- Return all Node labels in each identified path --------
MATCH p = (code1:Code {SAB:'HGNC'})-[r1:CODE]-(c:Concept)-[r2*]->(c2:Concept)-[r3:CODE]-(code2:Code {SAB:'HGNC'}) 
WITH code1.CODE as co1, nodes(p) AS n, code2.CODE as co2
RETURN co1,[x in n | labels(x)] ,co2 limit 10

---------Return all relationship types between 2 nodes--------
match (p:Person)
WHERE p.name IN ["Keanu Reeves", "Carrie-Anne Moss"]
with collect(id(p)) as nodes
CALL apoc.algo.cover(nodes) YIELD rel RETURN  startNode(rel), rel, endNode(rel);


----------- Finding paths or 1 hop distance relationships
----HGNC-HGNC 1 hops---
MATCH path =(c:Code{SAB:'HGNC'})-[:CODE]-(n:Concept)-[r]-(m:Concept)-[:CODE]-(c2:Code{SAB:'HGNC'})
RETURN c.CODE,n.CUI,type(r),m.CUI,c2.CODE 

----HGNC-Concept 1 hops---
WITH "MATCH path =(c:Code{SAB:'HGNC'})-[:CODE]-(n:Concept)-[r]-(m:Concept)-[:CODE]-(c2:Code{SAB:'HGNC'})
RETURN c.CODE,n.CUI,type(r),m.CUI,c2.CODE " AS query  
CALL apoc.export.csv.query(query, "HGNC-HGNC-1hop.csv", {})
YIELD done RETURN done;

----Concept-Concept 1 hops---
WITH "MATCH path =(c:Concept)-[r]-(n:Concept)
RETURN c.CUI as concept_1,type(r) as link,n.CUI as Concept_2 " AS query  
CALL apoc.export.csv.query(query, "Concept-Concept-1hop.csv", {})
YIELD done RETURN done;

----Concept-Code 1 hops---
WITH "MATCH path =(c:Concept)-[r]-(n:Code)
RETURN c.CUI as concept,type(r) as link,n.CodeID as CodeID " AS query  
CALL apoc.export.csv.query(query, "Concept-Code-1hop.csv", {})
YIELD done RETURN done;

######## Filter out HGNC-HGNC Concept relationships  # 11,934 direct HGNC-HGNC relationships, this should be the same as the # of rels in the HGNC Concept graph projection
MATCH (code1:Code {SAB:"HGNC"})-[r1:CODE]-(c:Concept)-[r]->(c2:Concept)-[r3:CODE]-(code2:Code {SAB:"HGNC"}) 
WITH c,r,c2 WHERE NOT type(r) IN ["RO","RB","RN","genetic_biomarker_related_to", "related_to_genetic_biomarker","isa","inverse_isa"] RETURN  c,r,c2

##### Delete all direct HGNC-HGNC rels   #  Deleted 11,892 relationships, slightly less than expected.
MATCH (code1:Code {SAB:"HGNC"})-[r1:CODE]-(c:Concept)-[r]->(c2:Concept)-[r3:CODE]-(code2:Code {SAB:"HGNC"}) 
DELETE r

#### DEtach and Delete Semantic 'Gene or Genome' Node
MATCH (s:Semantic {name: 'Gene or Genome'}) DETACH DELETE s



WITH 'MATCH (n:Code {SAB:"HGNC"}) WITH collect(n) AS nodes UNWIND nodes AS a UNWIND nodes AS b WITH a, b WHERE a <> b MATCH p = shortestPath((a)-[*]-(b)) RETURN a.CodeID,LENGTH(p),b.CodeID LIMIT 50000' AS query
CALL apoc.export.csv.query(query, "HGNC-HGNC-shortestPath.csv", {})
YIELD file, source, format, nodes, relationships, properties, time, rows, batchSize, batches, done, data
RETURN file, source, format, nodes, relationships, properties, time, rows, batchSize, batches, done, data;


LIMIT 5000 --> took 12 minutues
# Excluding inverse relationships decreases number of shortest paths to find by half, so 40k*40k = 1.6 billion / 2 = 800 million 

MATCH (n:Code {SAB:'HGNC'}) 
WITH collect(n) AS nodes 
UNWIND nodes AS a 
UNWIND nodes AS b 
WITH * WHERE id(a) < id(b)
WITH a, b 
WHERE a <> b 
MATCH p = shortestPath((a)-[*]-(b)) 
RETURN a.CodeID,LENGTH(p) as distance,p as path,b.CodeID 

#### default depth limit for shortestPath is 15






WITH "MATCH (n:Code {SAB:'HGNC'}) WITH collect(n) AS nodes UNWIND nodes AS a UNWIND nodes[2001..4000] AS b WITH * WHERE id(a) < id(b)WITH a, b WHERE a <> b MATCH p = shortestPath((a)-[*]-(b)) RETURN LENGTH(p) as distance"
AS query  
CALL apoc.export.csv.query(query, "hgncSP_2001_4000.csv", {})
YIELD done RETURN done;



hgnc partition queries:

nodes[0..2000] - got 364,468 about 9% of the run
nodes[2001..4000]





#########################################################
### HGNC-HGNC ShortestPath Screenshot Example Queries ###
#########################################################

####  LENGTH 4:
MATCH (a:Code {SAB:'HGNC',CODE:'HGNC:7329'}) 
MATCH (b:Code {SAB:'HGNC',CODE:'HGNC:12658'}) 
MATCH (c:Concept {CUI:'C4684829'})-[r:CODE]-(d)
WITH a,b,c,d,r
MATCH p = shortestPath((a)-[*]-(b)) 
RETURN a.CodeID as source,p as path,b.CodeID as target,c,r,d


###### LENGTH 5:
MATCH (a:Code {SAB:'HGNC',CODE:'HGNC:7329'}) 
MATCH (b:Code {SAB:'HGNC',CODE:'HGNC:1068'}) 
MATCH (c:Concept {CUI:'C1706576'})-[r:CODE]-(d)
MATCH  (e:Concept {CUI:'C0086418'})-[r1:CODE]-(f)
WITH a,b,c,d,r,e,f,r1
MATCH p = shortestPath((a)-[*]-(b)) 
RETURN a.CodeID as source,p as path,b.CodeID as target,c,r,d,e,f,r1


###### LENGTH 6:
MATCH (a:Code {SAB:'HGNC',CODE:'HGNC:1744'}) 
MATCH (b:Code {SAB:'HGNC',CODE:'HGNC:4897'}) 
MATCH (c:Concept {CUI:'C1332725'})-[r:CODE]-(d)
MATCH  (e:Concept {CUI:'C1705435'})-[r1:CODE]-(f)
MATCH  (g:Concept {CUI:'C0086418'})-[r2:CODE]-(h)
MATCH  (i:Concept {CUI:'C1708271'})-[r3:CODE]-(j)
WITH a,b,c,d,r,e,f,r1,g,r2,h,i,j,r3
MATCH p = shortestPath((a)-[*]-(b)) 
RETURN a.CodeID as source,p as path,b.CodeID as target,c,r,d,e,f,r1,g,r2,h,i,j,r3






#### Query for the odd degree ( do degree = 53 bc 53 is where the first deviation occurs in the plot) in the new UMLS
WITH 'match (n:Concept)-[:CODE]-(c:Code) with n,apoc.node.degree(n) as d,c where d = 53 return n.CUI,c.SAB ' AS query
CALL apoc.export.csv.query(query, "newUMLS_OddDegree53_nodes.csv", {})
YIELD file, source, format, nodes, relationships, properties, time, rows, batchSize, batches, done, data
RETURN file, source, format, nodes, relationships, properties, time, rows, batchSize, batches, done, data;

# SAme ^^ but concept space only
WITH 'match (n:Concept) with n,apoc.node.degree(n) as d where d > 53 and d < 150 return n.CUI' AS query
CALL apoc.export.csv.query(query, "newUMLS_OddDegree53_150_nodes.csv", {})
YIELD file, source, format, nodes, relationships, properties, time, rows, batchSize, batches, done, data
RETURN file, source, format, nodes, relationships, properties, time, rows, batchSize, batches, done, data;


# Example of one of the HGNC nodes that hhad its degree jump bc of gtex
match (n:Concept{CUI:'C1413632'})-[r:CODE]-(c:Code) with n,r,c return r,c,n

match (n:Concept{CUI:'C1413632'})-[r]-(c:Concept)-[:CODE]-(co:Code)
return type(r) as rel, c.CUI as CUI,co.CodeID as codeID






###########################################
######### Other Helpful queries ###########
###########################################

# Pattern matching https://neo4j.com/docs/cypher-manual/current/syntax/patterns/#cypher-pattern-relationship

# Check memory estimation of algorithm (just bc the estimate fits into memory (max heap size) this does not guaruntee the actual query will fit.)
CALL gds.louvain.stream.estimate('g1') 

# Return info about a graph projection
CALL gds.graph.list('g1') YIELD
  graphName, database, nodeProjection, relationshipProjection, nodeQuery, relationshipQuery, nodeCount,
  relationshipCount, schema, degreeDistribution, density, creationTime, modificationTime, sizeInBytes, memoryUsage;

# How to get a list of nodeIds with their node type, for plotting
MATCH (n:Concept) WHERE n.CUI starts with "H" RETURN id(n) AS id, labels(n) as nodetype

# List of Concepts, with their attached Code node SABs
MATCH (n:Concept)-[:CODE]-(c:Code) WHERE n.CUI starts with "H" RETURN id(n) AS id, c.SAB as sab

remove graph,  CALL gds.graph.drop('g1') 
get graph info, CALL gds.graph.list('my-graph3')
check for graph, CALL gds.graph.exists('myGraph') YIELD exists


CALL gds.graph.list()


#######################
### Degree Queries ####   (Make sure single quotes are of this kind: " ' ")
#######################   (Run the first one on cluster in bin/cypher-shell)


## Get degree/num relationships
MATCH (s:Semantic {name: "Gene or Genome"})
RETURN apoc.node.degree(s) AS output;

# seperating queries by semicolon allows you to put multiple queries in a single script in the cypher-shell. 
# If you want to execute multiple queries at a time in the desktop you need to go to the settings tab and enable multiple query capability
# cypher-shell --format plain < query.txt # write results to a file without apoc.export.csv function

# These queries are all pretty much the same except for the part in the quotes that defines the actual query. The apoc.export.csv.query function
# acts the same in all of these queries.
# You can return a lot of info from the apoc.export function if you want to (see last query here).

# Degree of whole concept space
WITH "MATCH (c:Concept)-[*1]-(c2:Concept) RETURN c as concept,count(c2) as degree" AS query 
CALL apoc.export.csv.query(query, "degree-concept.csv", {})  
YIELD  done RETURN  done; 

# Degree of HGNC concept space
WITH "MATCH (hgnc_code:Code {SAB: 'HGNC'})-[:CODE]-(c:Concept)-[*1]-(c2:Concept) RETURN c as concept,count(c2) as degree" AS query  
CALL apoc.export.csv.query(query, "degree-HGNC-concepts.csv", {})  
YIELD done RETURN done; 

# Degree of HPO concept space
WITH "MATCH (hpo_code:Code {SAB: 'HPO'})-[:CODE]-(c:Concept)-[*1]-(c2:Concept) RETURN c as concept, count(c2) as degree" AS query
CALL apoc.export.csv.query(query, "degree-concept-HPO.csv", {})
YIELD done RETURN done;

# Degree of UBERON concept space
WITH "MATCH (ub_code:Code {SAB: 'UBERON'})-[:CODE]-(c:Concept)-[*1]-(c2:Concept) RETURN c as concept,count(c2) as degree" AS query
CALL apoc.export.csv.query(query, "degree-concept-UBERON.csv", {})
YIELD done RETURN done;

# Degree of GTEx concept space
WITH "MATCH (gtex:Code)-[:CODE]-(c:Concept)-[*1]-(c2:Concept) WHERE gtex.SAB = 'GTEX EQTL' or gtex.SAB = 'GTEX EXP'
RETURN c as concept,count(c2) as degree" AS query
CALL apoc.export.csv.query(query, "degree-concept-GTEX-both.csv", {})
YIELD file, source, format, nodes, relationships, properties, time, rows, batchSize, batches, done, data
RETURN file, source, format, nodes, relationships, properties, time, rows, batchSize, batches, done, data;









-------------------------------------------------------------------------------------------------------------
--------------------------- Ignore these queries, theyre just random notes ----------------------------------
-------------------------------------------------------------------------------------------------------------

####### DON'T use gds.graph.create() ##########   whats the difference b/t gds.graph.create() and gds.graph.create.cypher(), both create in-memory? --- more control w cypher projection
### Create an in-memory graph w/ gds.graph.create('name','Labels','relationships')
CALL gds.graph.create('my-graph', 'Concept', 'has_human_phenotype')
YIELD graphName, nodeCount, relationshipCount;
Nodes: 9,669,972	Relationships: 1218

########### Use apoc.path.subgraphAll to get subgraph########
MATCH (p:Person {name: "Stefan"})
CALL apoc.path.subgraphAll(p, {relationshipFilter: "KNOWS",minLevel: 1,maxLevel: 2}) 
YIELD nodes, relationships RETURN p,nodes, relationships;

### Example of apoc.path.subgraphAll() #######
MATCH (e:COMP) WHERE e.componentID= "f4db22e7-68d2-473d-960b-c98dbbadb3a0" 
with e limit 1 CALL apoc.path.subgraphAll(e, 
{relationshipFilter:'CHILD_OF|CONNECTED_TO|LINKED_TO', limit:10}) YIELD nodes 
UNWIND nodes as node  RETURN node.componentID as uuid, node.orphanID as oid, 
node.cTime as time

####### Or just use  gds.graph.create.cypher()     https://towardsdatascience.com/how-to-get-started-with-the-new-graph-data-science-library-of-neo4j-3c8fff6107b
CALL gds.graph.create.cypher('full_graph','MATCH (n) RETURN id(n) AS id','MATCH (n)-[e]-(m) RETURN id(n) AS source, e.weight AS weight, id(m) AS target')



######## Mutate graph w/ algo score as property #####
gds.pageRank.mutate()
 CALL gds.pageRank.mutate('g1', {mutateProperty: 'score'});
#######
CALL gds.pageRank.mutate('g1', {maxIterations: 20,dampingFactor: 0.85,mutateProperty: 'pagerank'})
YIELD nodePropertiesWritten, ranIterations
#######

CALL gds.pageRank.stream('g1')
YIELD nodeId, score
RETURN gds.util.asNode(nodeId).name AS name, score
ORDER BY score DESC, name ASC

#######
CALL gds.pageRank.stream('categorical_men',
    {relationshipWeightProperty:'weight'})
YIELD nodeId, score
RETURN gds.util.asNode(nodeId).Label as name, score
#######
CALL gds.util.nodeProperty('g1','pagerank')
#######
CALL gds.pageRank.stream('g1')
YIELD nodeId, score
RETURN gds.util.asNode(nodeId).Label as name, score
ORDER BY score DESC LIMIT 5

CALL gds.graph.create.cypher('g1', 'MATCH (n:Concept) RETURN id(n) AS id',
'MATCH (n:Concept)-[e]-(m:Concept) RETURN id(n) AS source, id(m) AS target, n.CUI as CUI' )

# Native Projection
CALL gds.graph.create('g1', 'Concept', '*', {nodeProperties: ['CUI']})
YIELD graphName, nodeCount, relationshipCount;

########### Stream node properties (after mutating graph to add) #########
########## This way we can return the score along with the CUI which allows us to map the scores by SAB  via the CUI-CODE file ######
CALL gds.graph.streamNodeProperties('g1', ['ID'])

-------------------------------------------------------------------------------------------------------------
------------------------------- ^^^ Ignore these, theyre Just Random Notes/Queries ^^^-----------------------
-------------------------------------------------------------------------------------------------------------

